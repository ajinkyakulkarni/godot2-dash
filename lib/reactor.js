// Generated by IcedCoffeeScript 108.0.11
var EngineIOReactor, Parser, engine, extend, stream, url, util,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

util = require("util");

url = require("url");

stream = require("readable-stream");

engine = require("engine.io");

Parser = require("riemann-query-parser/stream");

extend = util._extend;

EngineIOReactor = (function(_super) {
  __extends(EngineIOReactor, _super);

  function EngineIOReactor(server, options) {
    this.server = server;
    if (options == null) {
      options = {};
    }
    this.attachToSocket = __bind(this.attachToSocket, this);
    EngineIOReactor.__super__.constructor.call(this, extend(options, {
      objectMode: true
    }));
    this.engine = engine.attach(this.server);
    this.engine.on("connection", this.attachToSocket);
  }

  EngineIOReactor.prototype.attachToSocket = function(socket) {
    var e, filter, query;
    query = url.parse(socket.request.url, true).query;
    query = query.query;
    if (!query) {
      return socket.close();
    }
    try {
      filter = new Parser(query);
    } catch (_error) {
      e = _error;
      console.error(e);
      return socket.close();
    }
    this.pipe(filter, {
      end: false
    });
    filter.on("data", function(data) {
      return socket.send(JSON.stringify(data));
    });
    return socket.on("close", (function(_this) {
      return function() {
        _this.unpipe(filter);
        return filter.removeAllListeners("data");
      };
    })(this));
  };

  return EngineIOReactor;

})(stream.PassThrough);

module.exports = EngineIOReactor;

//# sourceMappingURL=reactor.js.map
